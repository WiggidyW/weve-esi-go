// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: weve_esi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeveEsiClient is the client API for WeveEsi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeveEsiClient interface {
	ActiveOrders(ctx context.Context, in *ActiveOrdersReq, opts ...grpc.CallOption) (*ActiveOrdersRep, error)
	AdjustedPrice(ctx context.Context, in *AdjustedPriceReq, opts ...grpc.CallOption) (*AdjustedPriceRep, error)
	Assets(ctx context.Context, in *AssetsReq, opts ...grpc.CallOption) (*AssetsRep, error)
	IndustryJobs(ctx context.Context, in *IndustryJobsReq, opts ...grpc.CallOption) (*IndustryJobsRep, error)
	MarketOrders(ctx context.Context, in *MarketOrdersReq, opts ...grpc.CallOption) (*MarketOrdersRep, error)
	Skills(ctx context.Context, in *SkillsReq, opts ...grpc.CallOption) (*SkillsRep, error)
	SystemIndex(ctx context.Context, in *SystemIndexReq, opts ...grpc.CallOption) (*SystemIndexRep, error)
	Transactions(ctx context.Context, in *TransactionsReq, opts ...grpc.CallOption) (*TransactionsRep, error)
}

type weveEsiClient struct {
	cc grpc.ClientConnInterface
}

func NewWeveEsiClient(cc grpc.ClientConnInterface) WeveEsiClient {
	return &weveEsiClient{cc}
}

func (c *weveEsiClient) ActiveOrders(ctx context.Context, in *ActiveOrdersReq, opts ...grpc.CallOption) (*ActiveOrdersRep, error) {
	out := new(ActiveOrdersRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/ActiveOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) AdjustedPrice(ctx context.Context, in *AdjustedPriceReq, opts ...grpc.CallOption) (*AdjustedPriceRep, error) {
	out := new(AdjustedPriceRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/AdjustedPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) Assets(ctx context.Context, in *AssetsReq, opts ...grpc.CallOption) (*AssetsRep, error) {
	out := new(AssetsRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) IndustryJobs(ctx context.Context, in *IndustryJobsReq, opts ...grpc.CallOption) (*IndustryJobsRep, error) {
	out := new(IndustryJobsRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/IndustryJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) MarketOrders(ctx context.Context, in *MarketOrdersReq, opts ...grpc.CallOption) (*MarketOrdersRep, error) {
	out := new(MarketOrdersRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/MarketOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) Skills(ctx context.Context, in *SkillsReq, opts ...grpc.CallOption) (*SkillsRep, error) {
	out := new(SkillsRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/Skills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) SystemIndex(ctx context.Context, in *SystemIndexReq, opts ...grpc.CallOption) (*SystemIndexRep, error) {
	out := new(SystemIndexRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/SystemIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weveEsiClient) Transactions(ctx context.Context, in *TransactionsReq, opts ...grpc.CallOption) (*TransactionsRep, error) {
	out := new(TransactionsRep)
	err := c.cc.Invoke(ctx, "/weve_esi_proto.WeveEsi/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeveEsiServer is the server API for WeveEsi service.
// All implementations must embed UnimplementedWeveEsiServer
// for forward compatibility
type WeveEsiServer interface {
	ActiveOrders(context.Context, *ActiveOrdersReq) (*ActiveOrdersRep, error)
	AdjustedPrice(context.Context, *AdjustedPriceReq) (*AdjustedPriceRep, error)
	Assets(context.Context, *AssetsReq) (*AssetsRep, error)
	IndustryJobs(context.Context, *IndustryJobsReq) (*IndustryJobsRep, error)
	MarketOrders(context.Context, *MarketOrdersReq) (*MarketOrdersRep, error)
	Skills(context.Context, *SkillsReq) (*SkillsRep, error)
	SystemIndex(context.Context, *SystemIndexReq) (*SystemIndexRep, error)
	Transactions(context.Context, *TransactionsReq) (*TransactionsRep, error)
	mustEmbedUnimplementedWeveEsiServer()
}

// UnimplementedWeveEsiServer must be embedded to have forward compatible implementations.
type UnimplementedWeveEsiServer struct {
}

func (UnimplementedWeveEsiServer) ActiveOrders(context.Context, *ActiveOrdersReq) (*ActiveOrdersRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveOrders not implemented")
}
func (UnimplementedWeveEsiServer) AdjustedPrice(context.Context, *AdjustedPriceReq) (*AdjustedPriceRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustedPrice not implemented")
}
func (UnimplementedWeveEsiServer) Assets(context.Context, *AssetsReq) (*AssetsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (UnimplementedWeveEsiServer) IndustryJobs(context.Context, *IndustryJobsReq) (*IndustryJobsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndustryJobs not implemented")
}
func (UnimplementedWeveEsiServer) MarketOrders(context.Context, *MarketOrdersReq) (*MarketOrdersRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketOrders not implemented")
}
func (UnimplementedWeveEsiServer) Skills(context.Context, *SkillsReq) (*SkillsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Skills not implemented")
}
func (UnimplementedWeveEsiServer) SystemIndex(context.Context, *SystemIndexReq) (*SystemIndexRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemIndex not implemented")
}
func (UnimplementedWeveEsiServer) Transactions(context.Context, *TransactionsReq) (*TransactionsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedWeveEsiServer) mustEmbedUnimplementedWeveEsiServer() {}

// UnsafeWeveEsiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeveEsiServer will
// result in compilation errors.
type UnsafeWeveEsiServer interface {
	mustEmbedUnimplementedWeveEsiServer()
}

func RegisterWeveEsiServer(s grpc.ServiceRegistrar, srv WeveEsiServer) {
	s.RegisterService(&WeveEsi_ServiceDesc, srv)
}

func _WeveEsi_ActiveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).ActiveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/ActiveOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).ActiveOrders(ctx, req.(*ActiveOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_AdjustedPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustedPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).AdjustedPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/AdjustedPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).AdjustedPrice(ctx, req.(*AdjustedPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).Assets(ctx, req.(*AssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_IndustryJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndustryJobsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).IndustryJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/IndustryJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).IndustryJobs(ctx, req.(*IndustryJobsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_MarketOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).MarketOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/MarketOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).MarketOrders(ctx, req.(*MarketOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_Skills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).Skills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/Skills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).Skills(ctx, req.(*SkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_SystemIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).SystemIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/SystemIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).SystemIndex(ctx, req.(*SystemIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeveEsi_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeveEsiServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weve_esi_proto.WeveEsi/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeveEsiServer).Transactions(ctx, req.(*TransactionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WeveEsi_ServiceDesc is the grpc.ServiceDesc for WeveEsi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeveEsi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weve_esi_proto.WeveEsi",
	HandlerType: (*WeveEsiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActiveOrders",
			Handler:    _WeveEsi_ActiveOrders_Handler,
		},
		{
			MethodName: "AdjustedPrice",
			Handler:    _WeveEsi_AdjustedPrice_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _WeveEsi_Assets_Handler,
		},
		{
			MethodName: "IndustryJobs",
			Handler:    _WeveEsi_IndustryJobs_Handler,
		},
		{
			MethodName: "MarketOrders",
			Handler:    _WeveEsi_MarketOrders_Handler,
		},
		{
			MethodName: "Skills",
			Handler:    _WeveEsi_Skills_Handler,
		},
		{
			MethodName: "SystemIndex",
			Handler:    _WeveEsi_SystemIndex_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _WeveEsi_Transactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weve_esi.proto",
}
